/////////////////////////////////////////////////////////////////////////////
// Name:        iohumdrum.h
// Author:      Craig Sapp
// Created:     05/08/2015
// vim:         ts=3
// Copyright (c) Authors and others. All rights reserved.
/////////////////////////////////////////////////////////////////////////////


#ifndef __VRV_IOHUMDRUM_H__
#define __VRV_IOHUMDRUM_H__

//----------------------------------------------------------------------------

#include "attdef.h"
#include "io.h"
#include <iostream>

using namespace std;

namespace vrv {

class Doc;
class StaffGrp;
class StaffDef;
class Page;
class System;
class Measure;
class Staff;
class Layer;
class Tie;


//----------------------------------------------------------------------------
// MeiInterface -- Used to navigate the MEI data structure while converting
//                 from Humdrum data.
//----------------------------------------------------------------------------
//
// <body>
// |  <mdiv>
// |  |  <pages>
// |  |  |  <page>
// |  |  |  |  <system>
// |  |  |  |  |  <scoreDef>
// |  |  |  |  |  |  <staffGrp>
// |  |  |  |  |  <measure>
// |  |  |  |  |  |  <staff>
// |  |  |  |  |  |  |  <layer>
//

class MeiInterface {
	public:
		MeiInterface(Doc* aDoc);
		~MeiInterface();

		void initializeNewScore(void);

	private:
		Doc*              doc; // received from constructor
		StaffGrp*         staffgroup; // attached to staffdef, only one allowed
		vector<StaffDef*> staffdefinitions; // should match size of staff variable

		vector<Page*> pages;                       // each score has list of pages
		vector<vector<System*> > systems;          // page/system

		vector<Measure*> measures;                 // list of measures for score
		vector<vector<Staff*> > staves;            // measure/staff
		vector<vector<vector<Layer*> > > layers;   // measure/staff/layer

	public:
		int  addPage            (void);
		int  addSystem          (void);
		void initializeScore    (void);
		int  getPageCount       (void);
		void createStaffGroup   (void);
		int  createPart         (void);
		int  addMeasure         (void);
		int  addStaff           (void);
		int  addLayer           (void);

};



//----------------------------------------------------------------------------
// HumRat -- Rational number class for durations.
//----------------------------------------------------------------------------

class HumRat {
	public:
		         HumRat         (void);
		         HumRat         (int value);
		         HumRat         (int numerator, int denominator);
		         HumRat         (const HumRat& rat);
		        ~HumRat         ();

		bool     isNegative     (void) const;
		bool     isPositive     (void) const;
		bool     isZero         (void) const;
		bool     isNonNegative  (void) const;
		bool     isNonPositive  (void) const;
		bool     isInfinite     (void) const;
		bool     isFinite       (void) const;
      bool     isNaN          (void) const;
		bool     isInteger      (void) const;
		double   getFloat       (void) const;
		int      getInteger     (double round = 0.0) const;
		int      getNumerator   (void) const;
		int      getDenominator (void) const;
		void     setValue       (int numerator);
		void     setValue       (int numerator, int denominator);
		HumRat   getAbs         (void) const;
		HumRat&  makeAbs        (void);
		HumRat   operator-      (void);
		HumRat   operator+      (const HumRat& value);
		HumRat   operator+      (int value);
		HumRat   operator-      (const HumRat& value);
		HumRat   operator-      (int value);
		HumRat   operator*      (const HumRat& value);
		HumRat   operator*      (int value);
		HumRat   operator/      (const HumRat& value);
		HumRat   operator/      (int value);
		HumRat&  operator=      (const HumRat& value);
		HumRat&  operator=      (int value);
		bool     operator==     (const HumRat& value) const;
		bool     operator==     (double value) const;
		bool     operator==     (int value) const;
		bool     operator<      (const HumRat& value) const;
		bool     operator<      (double value) const;
		bool     operator<      (int value) const;
		bool     operator<=     (const HumRat& value) const;
		bool     operator<=     (double value) const;
		bool     operator<=     (int value) const;
		bool     operator>      (const HumRat& value) const;
		bool     operator>      (double value) const;
		bool     operator>      (int value) const;
		bool     operator>=     (const HumRat& value) const;
		bool     operator>=     (double value) const;
		bool     operator>=     (int value) const;
		ostream& printFraction  (ostream& = cout) const;
		ostream& printMixedFraction (ostream& out = cout,
		                         string separator = "_") const;
      ostream& printList      (ostream& out) const;

	protected:
		void     reduce         (void);
		int      gcdIterative   (int a, int b);
		int      gcdRecursive   (int a, int b);

	private:
		int top;
		int bot;
};

ostream& operator<<(ostream& out, HumRat number);
	


//----------------------------------------------------------------------------
// Convert -- Convert between various data representations.
//----------------------------------------------------------------------------

class Convert {
	public:
		static HumRat    recipToDuration   (const string& recip, 
		                                    string separator = " ");
};


//----------------------------------------------------------------------------
// HumdrumToken -- Used to work with Humdrum fields.
//----------------------------------------------------------------------------

class HumdrumToken : public string {
	public:
		         HumdrumToken      (void);
		         HumdrumToken      (const char* token);
		         HumdrumToken      (const string& token);
		        ~HumdrumToken      ();

		string   getDataType       (void);
		string   getSpineInfo      (void);
		int      getTrack          (void);
		int      getSubtrack       (void);
		string   getTrackString    (void);
		bool     isNull            (void) const;
		bool     isManipulator     (void) const;
		bool     isExclusive       (void) const;
		HumRat   getDuration       (void) const;
		bool     equalChar         (int index, char ch) const;

	protected:
		void     setDataType       (const string& datatype);
		void     setSpineInfo      (const string& spineinfo);
		void     setTrack          (int aTrack, int aSubtrack);
		void     setTrack          (int aTrack);
		void     setSubtrack       (int aSubtrack);
		bool     analyzeDuration   (void);

	private:
		string exinterp;   // data type of token
		string spining;    // spine manipulation history of token
		int    track;      // track # (starting at 1 for first spine);
		int    subtrack;   // subtrack # (starting at 1 for first track, or
                         // zero if there are no subtracks.
		HumRat duration;   // duration of token; negative if undefined;

	friend class HumdrumLine;
	friend class HumdrumFile;
};



//----------------------------------------------------------------------------
// HumdrumLine -- Used to store Humdrum text lines and analytic markup
//                of the line.
//----------------------------------------------------------------------------

class HumdrumLine : public string {
	public:
		         HumdrumLine     (void);
		         HumdrumLine     (const string& aString);
		         HumdrumLine     (const char* aString);
		        ~HumdrumLine     ();

		bool     isComment       (void) const;
		bool     isCommentLocal  (void) const;
		bool     isCommentGlobal (void) const;
		bool     isExclusive     (void) const;
		bool     isTerminator    (void) const;
		bool     isInterp        (void) const;
		bool     isMeasure       (void) const;
		bool     isData          (void) const;
		bool     isEmpty         (void) const;
		bool     hasSpines       (void) const;
		bool     isManipulator   (void) const;
		void     getTokens       (vector<HumdrumToken>& list);
		int      getTokenCount   (void) const;
      HumdrumToken& token      (int index);
      string   getTokenString  (int index) const;
		bool     equalChar       (int index, char ch) const;
		char     getChar         (int index) const;
		ostream& printSpineInfo  (ostream& out = cout);
		ostream& printDataType   (ostream& out = cout);
		ostream& printTrackInfo  (ostream& out = cout);
		ostream& printDataTypeInfo(ostream& out = cout);
		ostream& printDurationInfo(ostream& out = cout);
		int      createTokensFromLine (void);
		void     createLineFromTokens (void);

	protected:
		bool     analyzeTracks   (void);
		bool     analyzeTokenDurations (void);

	private:
		vector<HumdrumToken> tokens;
		HumRat               duration;
		HumRat               absolute;

	friend class HumdrumFile;
};

ostream&  operator<<  (ostream& out, HumdrumLine& line);


//----------------------------------------------------------------------------
// HumdrumFile -- Used to store Humdrum text lines from input stream
//                for futher parsing.
//----------------------------------------------------------------------------

class HumdrumFile {
	public:
		             HumdrumFile         (void);
		            ~HumdrumFile         ();

		bool         read                (istream& infile);
		void         createTokensFromLines(void);
		void         createLinesFromTokens(void);
		HumdrumLine& operator[]          (int index);
		void         append              (const char* line);
		void         append              (const string& line);
		int          size                (void);
		ostream&     printSpineInfo      (ostream& out = cout);
		ostream&     printDataTypeInfo   (ostream& out = cout);
		ostream&     printTrackInfo      (ostream& out = cout);
		ostream&     printDurationInfo   (ostream& out = cout);

	protected:
		bool         analyzeSpines      (void);
		bool         analyzeRhythm      (void);
		bool         analyzeTokenDurations (void);
		bool         analyzeTracks      (void);
		int          adjustSpines       (HumdrumLine& line, 
		                                 vector<string>& datatype, 
		                                 vector<string>& sinfo, int trackcount);
		string       getMergedSpineInfo (vector<string>& info, int starti,
		                                 int extra);

	private:
		vector<HumdrumLine> lines;
};


//----------------------------------------------------------------------------
// HumdrumInput -- Verovio interface to Humdrum Files.
//----------------------------------------------------------------------------

class HumdrumInput: public FileInputStream {

	public:
		// constructors and destructors
		HumdrumInput(Doc *doc, string filename);
		virtual ~HumdrumInput();

		virtual bool ImportFile( );
		virtual bool ImportString(string data);

	private:
		bool importStream(istream& data);
		int do_Note(int pos, const char* data, bool rest);
		int do_globalSpec(int pos, const char* data);
		int do_Clef(int pos, const char* data);
		int parseMeter(int pos, const char* data);
		void addKeySignature(Layer* layer, const string& keysig);

	public:
		bool convertHumdrumToMei(HumdrumFile& infile, MeiInterface& mei);
		int convertMeasure(HumdrumFile& infile, MeiInterface& mei, int starti);

	private:
		string m_filename;

		unsigned int m_clef_offset;
		bool m_antique_notation; // support square notation

};

} // namespace vrv

#endif // __VRV_IOHUMDRUM_H__
